#!/bin/env sh
:; # -*- mode: emacs-lisp; lexical-binding: t -*-
:; # -*- lexical-binding: t -*-
:; emacs -q --no-site-file --batch --load "$0" -- "$@"
:; exit 0
(require 'package)
(require 'cl)

(message (format "Lexical binding [%s]" lexical-binding))

(add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/"))
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))

(condition-case e
    (let* ((crown-bin-folder (file-name-directory (file-truename load-file-name)))
        (init-file (expand-file-name "./early-init.el" crown-bin-folder))
        (crown-packages-file (expand-file-name "./crown-packages.el" crown-bin-folder)))
        (load crown-packages-file nil 'nomessage 'nosuffix)
        (load init-file nil 'nomessage 'nosuffix))
    (error (message (format "Error: %s" e))
              (kill-emacs 2)))

(message "Starting crown package manager")

(message (format "Packages %s" crown-packages))

(setq crown-commands ())

(defun recruit (args)
    (let* ((crown-package (car args)))
    (cond (crown-package 
        (message (format "Installing package: %s" crown-package))
        (package-install (intern crown-package)))
        (t (dolist (crown-package-def crown-packages)
                (let ((crown-package (car crown-package-def)))
                (message (format "Package %s" crown-package))
                (package-install crown-package)))))))

(add-to-list 'crown-commands #'recruit)

(message (format "%s" crown-commands))

(defun cli|no-comnd (comnd)
  (lexical-let ((comnd comnd))
    #'(lambda (args)
	(message (format "No commnd for %s full [%s]" comnd args)))))

(defun cli|comnd-exist (comnd)
      (if (fboundp (intern comnd))
	  (intern comnd)
	(message comnd)
	(cli|no-comnd comnd)))

(defun run! (name &rest args)
    (let* ((args (flatten-list args)) 
        (command (car args))
        (command-args (cdr (flatten-list args))))
    (message (format "Commands: %s" crown-commands))
    (message (format "Name: %s" command))
    (message (format "Params: %s" (cdr args)))
    (funcall (cli|comnd-exist command) command-args)))

(run! "crown" (cdr (member "--" argv)))

(message "End crown package manager")

